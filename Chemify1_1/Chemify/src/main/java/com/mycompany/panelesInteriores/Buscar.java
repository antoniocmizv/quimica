/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.panelesInteriores;

import com.mycompany.Clases.objetos.Materiales;
import com.mycompany.Clases.objetos.Producto;
import com.mycompany.Clases.objetos.ProductoAuxiliar;
import com.mycompany.Clases.objetos.Quimico;
import com.mycompany.ConexionSQL.Conexion;
import com.mycompany.panelesActualizar.ActualizarM;
import com.mycompany.panelesActualizar.ActualizarPA;
import com.mycompany.panelesActualizar.ActualizarR;
import com.mycompany.popUp.*;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.*;
import java.util.List;


/**
 * @author mario
 */
public class Buscar extends javax.swing.JPanel {

    private ArrayList<Producto> productos;

    /**
     * Creates new form Buscar
     */
    public Buscar() {
        initComponents();
        //hago que la tabla no se pueda editar
        tablaProductos.setDefaultEditor(Object.class, null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tablaProductos = new javax.swing.JTable();
        TFBuscar = new javax.swing.JTextField();
        botonBuscar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        CBCantidad = new javax.swing.JCheckBox();
        Nombreaz = new javax.swing.JCheckBox();
        Nombreza = new javax.swing.JCheckBox();
        TFBuscar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TFBuscar.setText("");
            }
        });

        CBCantidad.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
                    // Ordenar por cantidad (asumiendo que la cantidad es la tercera columna)
                    ordenarTablaCantidad((DefaultTableModel) tablaProductos.getModel(), 2);
                }
            }
        });

        Nombreaz.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
                    // Ordenar por nombre (asumiendo que el nombre es la segunda columna)
                    ordenarTablaNombreAZ((DefaultTableModel) tablaProductos.getModel(), 1);
                }
            }
        });
        Nombreza.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
                    // Ordenar por nombre (asumiendo que el nombre es la segunda columna)
                    ordenarTablaNombreZA((DefaultTableModel) tablaProductos.getModel(), 1);
                }
            }
        });
        tablaProductos.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent me) {
                JTable table = (JTable) me.getSource();
                Point p = me.getPoint();
                int row = table.rowAtPoint(p);
                if (me.getClickCount() == 2) {
                    //abre un poup con el riesgo del producto seleccionado
                    System.out.println("Double click detected on row " + row);
                    Producto producto = productos.get(row);
                    //abre el popup dependiendo del tipo de producto
                    if (producto instanceof Materiales) {
                        Materiales material = (Materiales) producto;
                        PopUpM a = new PopUpM(material);
                        a.setSize(800, 800);
                        a.setLocationRelativeTo(null);
                        a.setVisible(true);
                    } else if (producto instanceof Quimico) {
                        Quimico quimico = (Quimico) producto;
                        PopUpR a = new PopUpR(quimico);
                        a.setSize(800, 800);
                        a.setLocationRelativeTo(null);
                        a.setVisible(true);
                    } else if (producto instanceof ProductoAuxiliar) {
                        ProductoAuxiliar auxiliar = (ProductoAuxiliar) producto;
                        PopUpPA a = new PopUpPA( auxiliar);
                        a.setSize(800, 800);
                        a.setLocationRelativeTo(null);
                        a.setVisible(true);
                    } else {
                        JOptionPane.showMessageDialog(null, "No se puede mostrar el producto");

                    }

                }
                if (me.getButton() == MouseEvent.BUTTON3) {
                    JPopupMenu popup = new JPopupMenu();
                    JMenuItem menuItem = new JMenuItem("Modificar");
                    JMenuItem menuItem2 = new JMenuItem("Eliminar");
                    popup.add(menuItem);
                    popup.add(menuItem2);
                    popup.show(table, me.getX(), me.getY());
                    System.out.println("Right click detected on row " + row);// Right click
                    menuItem.addActionListener(new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent e) {
                            // Aquí va el código para modificar el producto
                            Producto producto = productos.get(row);
                            if (producto instanceof Materiales) {
                                Materiales material = (Materiales) producto;
                                ActualizarM actualizarM = new ActualizarM(material);
                                actualizarM.setVisible(true);

                            } else if (producto instanceof Quimico) {
                                Quimico quimico = (Quimico) producto;
                                ActualizarR actualizarR = new ActualizarR(quimico);
                                actualizarR.setVisible(true);

                            } else if (producto instanceof ProductoAuxiliar) {
                                ProductoAuxiliar auxiliar = (ProductoAuxiliar) producto;
                                ActualizarPA actualizarPA = new ActualizarPA(auxiliar);
                                actualizarPA.setVisible(true);

                            } else {
                                JOptionPane.showMessageDialog(null, "No se puede modificar el producto");
                            }
                        }
                    });
                    menuItem2.addActionListener(new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent e) {
                            // Aquí va el código para eliminar el producto
                            Producto producto = productos.get(row);
                            //mensaje de verificacion
                            int dialogButton = JOptionPane.YES_NO_OPTION;
                            int dialogResult = JOptionPane.showConfirmDialog(null, "¿Desea eliminar el producto?", "Warning", dialogButton);
                            if (dialogResult == JOptionPane.YES_OPTION) {
                                // Eliminar el producto
                                Conexion.eliminarProducto(producto);
                                JOptionPane.showMessageDialog(null, "Producto eliminado");

                            }

                        }
                    });
                }
            }
        });
        setBackground(new java.awt.Color(222, 255, 238));
        setPreferredSize(new java.awt.Dimension(1046, 668));

        tablaProductos.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{
                        {null, null, null, null},

                },
                new String[]{
                        " ", " ", " ", " ", " "
                }
        ));
        jScrollPane1.setViewportView(tablaProductos);

        TFBuscar.setText("Nombre");
        TFBuscar.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                TFBuscarFocusGained(evt);
            }

            public void focusLost(java.awt.event.FocusEvent evt) {
                TFBuscarFocusLost(evt);
            }
        });
        TFBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TFBuscarActionPerformed(evt);
            }
        });

        botonBuscar.setBackground(new java.awt.Color(0, 102, 102));
        botonBuscar.setForeground(new java.awt.Color(255, 255, 255));
        botonBuscar.setText("Buscar");

        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Ordenar por : ");

        CBCantidad.setText("Cantidad ");

        Nombreaz.setText("Nombre (a-z)");
        Nombreaz.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NombreazActionPerformed(evt);
            }
        });

        Nombreza.setText("Nombre (z-a)");
        Nombreza.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NombrezaActionPerformed(evt);
            }
        });
        botonBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBuscarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(433, 433, 433)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(jLabel1)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(Nombreaz)
                                                                        .addComponent(CBCantidad)
                                                                        .addComponent(Nombreza)))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(TFBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(61, 61, 61)
                                                                .addComponent(botonBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(30, 30, 30)
                                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 986, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(30, 30, 30))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(67, 67, 67)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(botonBuscar)
                                        .addComponent(TFBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel1)
                                        .addComponent(CBCantidad))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Nombreaz)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Nombreza, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 417, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void ordenarTablaNombreAZ(DefaultTableModel model, int i) {
        // Convertir los datos de la tabla a una lista
        List<Producto> datos = new ArrayList<>(productos);

        // Ordenar la lista por nombre
        datos.sort(Comparator.comparing(Producto::getNombre));

        // Limpiar la tabla
        while (model.getRowCount() > 0) {
            model.removeRow(0);
        }

        // Agregar los datos ordenados a la tabla
        for (Producto producto : datos) {
            if (producto instanceof Materiales) {
                Materiales material = (Materiales) producto;
                model.addRow(new Object[]{
                        material.getId_producto(),
                        material.getNombre(),
                        material.getCantidad(),
                        material.getStock_minimo(),
                        material.getUbicacion(),
                        material.getAlmacen(),
                        material.getSubtipo(),
                        material.getDescripcion(),
                        material.getFecha_compra(),
                        material.getNumero_serie()
                });
            } else if (producto instanceof Quimico) {
                Quimico quimico = (Quimico) producto;
                model.addRow(new Object[]{
                        quimico.getId_producto(),
                        quimico.getNombre(),
                        quimico.getCantidad(),
                        quimico.getStock_minimo(),
                        quimico.getUbicacion(),
                        quimico.getAlmacen(),
                        quimico.getPureza(),
                        quimico.getFecha_caducidad(),
                        quimico.getFormato()
                });
            } else {
                model.addRow(new Object[]{
                        producto.getId_producto(),
                        producto.getNombre(),
                        producto.getCantidad(),
                        producto.getStock_minimo(),
                        producto.getUbicacion(),
                        producto.getAlmacen()
                });
            }
        }
        // Establecer el modelo de la tabla
        tablaProductos.setModel(model);
    }
    private void ordenarTablaNombreZA(DefaultTableModel model, int i) {
        // Convertir los datos de la tabla a una lista
        List<Producto> datos = new ArrayList<>(productos);

        // Ordenar la lista por nombre
        datos.sort(Comparator.comparing(Producto::getNombre).reversed());

        // Limpiar la tabla
        while (model.getRowCount() > 0) {
            model.removeRow(0);
        }

        // Agregar los datos ordenados a la tabla
        for (Producto producto : datos) {
            if (producto instanceof Materiales) {
                Materiales material = (Materiales) producto;
                model.addRow(new Object[]{
                        material.getId_producto(),
                        material.getNombre(),
                        material.getCantidad(),
                        material.getStock_minimo(),
                        material.getUbicacion(),
                        material.getAlmacen(),
                        material.getSubtipo(),
                        material.getDescripcion(),
                        material.getFecha_compra(),
                        material.getNumero_serie()
                });
            } else if (producto instanceof Quimico) {
                Quimico quimico = (Quimico) producto;
                model.addRow(new Object[]{
                        quimico.getId_producto(),
                        quimico.getNombre(),
                        quimico.getCantidad(),
                        quimico.getStock_minimo(),
                        quimico.getUbicacion(),
                        quimico.getAlmacen(),
                        quimico.getPureza(),
                        quimico.getFecha_caducidad(),
                        quimico.getFormato()
                });
            } else {
                model.addRow(new Object[]{
                        producto.getId_producto(),
                        producto.getNombre(),
                        producto.getCantidad(),
                        producto.getStock_minimo(),
                        producto.getUbicacion(),
                        producto.getAlmacen()
                });
            }
        }
        // Establecer el modelo de la tabla
        tablaProductos.setModel(model);
    }

    private void TFBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TFBuscarActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_TFBuscarActionPerformed

    private void NombreazActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NombreazActionPerformed
        // TODO add your handling code here:
        if (Nombreaz.isSelected()) {
            Nombreza.setSelected(false);
        }
    }//GEN-LAST:event_NombreazActionPerformed

    private void NombrezaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NombrezaActionPerformed
        // TODO add your handling code here:
        if (Nombreza.isSelected()) {
            Nombreaz.setSelected(false);
        }
    }//GEN-LAST:event_NombrezaActionPerformed

    private void TFBuscarFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TFBuscarFocusGained
        // TODO add your handling code here:
        if (TFBuscar.getText().equalsIgnoreCase("Nombre"))// Al clicar en el tfield borra su contenido si su contenido coincide con el valor default
            TFBuscar.setText("");
    }//GEN-LAST:event_TFBuscarFocusGained

    private void TFBuscarFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TFBuscarFocusLost
        // TODO add your handling code here:
        if (TFBuscar.getText().isBlank() || TFBuscar.getText().isEmpty()) //Comprueba que el TextField este vacio o en blanco para poner el texto por defecto
            TFBuscar.setText("Nombre");
    }//GEN-LAST:event_TFBuscarFocusLost

    private DefaultTableModel generarModeloTablaProducto() {
        return new DefaultTableModel(
                new Object[][]{},
                new String[]{"ID", "Nombre", "Cantidad", "Stock Mínimo", "Ubicación", "Almacén"}
        );
    }

    private DefaultTableModel generarModeloTablaMateriales() {
        return new DefaultTableModel(
                new Object[][]{},
                new String[]{"ID", "Nombre", "Cantidad", "Stock Mínimo", "Ubicación", "Almacén", "Tipo", "Descripción", "Fecha Compra", "Número Serie"}
        );
    }

    private DefaultTableModel generarModeloTablaQuimico() {
        return new DefaultTableModel(
                new Object[][]{},
                new String[]{"ID", "Nombre", "Cantidad", "Stock Mínimo", "Ubicación", "Almacén", "Pureza", "Fecha Caducidad", "Formato"}
        );
    }

    private DefaultTableModel generarModeloTablaProductoAuxiliar() {
        return new DefaultTableModel(
                new Object[][]{},
                new String[]{"ID", "Nombre", "Cantidad", "Stock Mínimo", "Ubicación", "Almacén", "Formato"}
        );
    }

    private void botonBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BuscarBoton1ActionPerformed
        // TODO add your handling code here:
        try {

            tablaProductos.setVisible(true);

            productos = Conexion.buscarProductos(TFBuscar.getText());
            //Añadir los productos a la tabla de productos
            DefaultTableModel model;

            if (!productos.isEmpty()) {
                Producto primerProducto = productos.get(0);
                if (primerProducto instanceof Materiales) {
                    model = generarModeloTablaMateriales();
                } else if (primerProducto instanceof Quimico) {
                    model = generarModeloTablaQuimico();
                } else if (primerProducto instanceof ProductoAuxiliar) {
                    model = generarModeloTablaProductoAuxiliar();
                } else {
                    model = generarModeloTablaProducto();
                }
            } else {
                JOptionPane.showMessageDialog(null, "No se encontraron productos");
                model = generarModeloTablaProducto();
            }

            for (Producto producto : productos) {
                if (producto instanceof Materiales) {
                    Materiales material = (Materiales) producto;
                    model.addRow(new Object[]{
                            material.getId_producto(),
                            material.getNombre(),
                            material.getCantidad(),
                            material.getStock_minimo(),
                            material.getUbicacion(),
                            material.getAlmacen(),
                            material.getSubtipo(),
                            material.getDescripcion(),
                            material.getFecha_compra(),
                            material.getNumero_serie()
                    });
                } else if (producto instanceof Quimico) {
                    Quimico quimico = (Quimico) producto;
                    model.addRow(new Object[]{
                            quimico.getId_producto(),
                            quimico.getNombre(),
                            quimico.getCantidad(),
                            quimico.getStock_minimo(),
                            quimico.getUbicacion(),
                            quimico.getAlmacen(),
                            quimico.getPureza(),
                            quimico.getFecha_caducidad(),
                            quimico.getFormato()
                    });
                } else {
                    model.addRow(new Object[]{
                            producto.getId_producto(),
                            producto.getNombre(),
                            producto.getCantidad(),
                            producto.getStock_minimo(),
                            producto.getUbicacion(),
                            producto.getAlmacen()
                    });
                }
                tablaProductos.setModel(model);
            }

        } catch (NullPointerException ex) {
            System.out.println(ex);
            JOptionPane.showMessageDialog(null, "Error al buscar productos, no se encuentra");
        } catch (Exception ex) {
            System.out.println(ex);
            JOptionPane.showMessageDialog(null, "Error al buscar productos" + ex);
        }


    }//GEN-LAST:event_BuscarBoton1ActionPerformed

    private void ordenarTablaCantidad(DefaultTableModel modelo, int columna) {
        // Convertir los datos de la tabla a una lista
        List<Producto> datos = new ArrayList<>(productos);

        // Ordenar la lista por cantidad
        datos.sort(Comparator.comparing(Producto::getCantidad));

        // Limpiar la tabla
        while (modelo.getRowCount() > 0) {
            modelo.removeRow(0);
        }

        // Agregar los datos ordenados a la tabla
        for (Producto producto : datos) {
            if (producto instanceof Materiales) {
                Materiales material = (Materiales) producto;
                modelo.addRow(new Object[]{
                        material.getId_producto(),
                        material.getNombre(),
                        material.getCantidad(),
                        material.getStock_minimo(),
                        material.getUbicacion(),
                        material.getAlmacen(),
                        material.getSubtipo(),
                        material.getDescripcion(),
                        material.getFecha_compra(),
                        material.getNumero_serie()
                });
            } else if (producto instanceof Quimico) {
                Quimico quimico = (Quimico) producto;
                modelo.addRow(new Object[]{
                        quimico.getId_producto(),
                        quimico.getNombre(),
                        quimico.getCantidad(),
                        quimico.getStock_minimo(),
                        quimico.getUbicacion(),
                        quimico.getAlmacen(),
                        quimico.getPureza(),
                        quimico.getFecha_caducidad(),
                        quimico.getFormato()
                });
            } else {
                modelo.addRow(new Object[]{
                        producto.getId_producto(),
                        producto.getNombre(),
                        producto.getCantidad(),
                        producto.getStock_minimo(),
                        producto.getUbicacion(),
                        producto.getAlmacen()
                });
            }
        }
        // Establecer el modelo de la tabla
        tablaProductos.setModel(modelo);
    }



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonBuscar;
    private javax.swing.JCheckBox CBCantidad;
    private javax.swing.JCheckBox Nombreaz;
    private javax.swing.JCheckBox Nombreza;
    private javax.swing.JTextField TFBuscar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaProductos;
    // End of variables declaration//GEN-END:variables
}
